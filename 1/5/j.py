# J. Треугольники
# Петя достаточно давно занимается в математическом кружке, поэтому он уже успел не только правила выполнения простейших операций, но и такое достаточно сложное понятие как симметрия.
# Для того, чтобы получше изучить симметрию Петя решил начать с наиболее простых геометрических фигур – треугольников. Он скоро понял, что осевой симметрией обладают так называемые равнобедренные треугольники. Поэтому теперь Петя ищет везде такие треугольники.
# Напомним, что треугольник называется равнобедренным, если его площадь положительна, и у него есть хотя бы две равные стороны.
# Недавно Петя, зайдя в класс, увидел, что на доске нарисовано n точек. Разумеется, он сразу задумался, сколько существует троек из этих точек, которые являются вершинами равнобедренных треугольников.
# Требуется написать программу, решающую указанную задачу.

# Формат ввода
# Входной файл содержит целое число n (3 ≤ n ≤ 1500). Каждая из последующих строк содержит по два целых числа – xi и yi – координаты i-ой точки. Координаты точек не превосходят 109 по абсолютной величине. Среди заданных точек нет совпадающих.

# Формат вывода
# В выходной файл выведите ответ на задачу.

# Решение из разбора

n = int(input())
points = []
for _ in range(n):
	x, y = map(int, input().split())
	points.append((x, y))

result = 0
# преположим, что каждая точка может быть вершиной
for apex in points:
	# множество векторов из этой вершины до остальных точек
	used_legs = set()
	# расстояние от вершины до остальных точек ** 2
	legs_len = []
	# определим расстояние от вершины до остальных точек
	for point in points:
		vec_x = point[0] - apex[0]
		vec_y = point[1] - apex[1]
		legs_len.append(vec_x ** 2 + vec_y ** 2)
		# если ранее встречался симметричный вектор
		if (vec_x, vec_y) in used_legs:
			result -= 1
		# добавим симметричный относительно вершины вектор, чтобы не учитывать вырожденные треугольники
		used_legs.add((-vec_x, -vec_y))
	legs_len.sort()
	right = 0
	for left in range(n):
		while right < len(legs_len) and legs_len[right] == legs_len[left]:
			right += 1
		result += right - left - 1

print(result)
