# G. Счет в гипершашках
# Андрей работает судьей на чемпионате по гипершашкам. В каждой игре в гипершашки участвует три игрока. По ходу игры каждый из игроков набирает некоторое положительное целое число баллов. Если после окончания игры первый игрок набрал a баллов, второй — b, а третий c, то говорят, что игра закончилась со счетом a:b:c.
# Андрей знает, что правила игры гипершашек устроены таким образом, что в результате игры баллы любых двух игроков различаются не более чем в k раз.
# После матча Андрей показывает его результат, размещая три карточки с очками игроков на специальном табло. Для этого у него есть набор из n карточек, на которых написаны числа x1, x2, …, xn. Чтобы выяснить, насколько он готов к чемпионату, Андрей хочет понять, сколько различных вариантов счета он сможет показать на табло, используя имеющиеся карточки.
# Требуется написать программу, которая по числу k и значениям чисел на карточках, которые имеются у Андрея, определяет количество различных вариантов счета, которые Андрей может показать на табло.

# Формат ввода
# Первая строка входного файла содержит два целых числа: n и k (3 ≤ n ≤ 100000, 1 ≤ k ≤ 109).
# Вторая строка входного файла содержит n целых чисел x1, x2, …, xn (1 ≤ xi ≤ 109).

# Формат вывода
# Выходной файл должен содержать одно целое число — искомое количество различных вариантов счета.

# Решение из разбора

from collections import Counter

n, k = map(int, input().split())
unique_cards = list(map(int, input().split()))

# посчитаем сколько раз встречается каждая карточка
counter = Counter(unique_cards)
# отсортируем не повторяющиеся карточки
unique_cards = sorted(counter.keys())
result = 0
duplicates = 0
right = 0
for left in range(len(unique_cards)):
	# двигаем правую границу, чтобы она указывала на карточку, которая более чем в k раз больше карточки на левой границе
	while right < len(unique_cards) and unique_cards[right] <= unique_cards[left] * k:
		if counter[unique_cards[right]] >= 2:
			duplicates += 1
		right += 1
	range_len = right - left
	# если карточка встретилась 2 и более раз - 3 перестановки
	if counter[unique_cards[left]] >= 2:
		result += (range_len - 1) * 3
	# если карточка встретилась 3 и более раз - 1 перестановка
	if counter[unique_cards[left]] >= 3:
		result += 1
	result += (range_len - 1) * (range_len - 2) * 3
	if counter[unique_cards[left]] >= 2:
		duplicates -= 1
	result += duplicates * 3

print(result)
