# I. Субботник
# В классе учатся N человек. Классный руководитель получил указание направить на субботник R бригад по С человек в каждой.
# Все бригады на субботнике будут заниматься переноской бревен. Каждое бревно одновременно несут все члены одной бригады. При этом бревно нести тем удобнее, чем менее различается рост членов этой бригады.
# Числом неудобства бригады будем называть разность между ростом самого высокого и ростом самого низкого членов этой бригады (если в бригаде только один человек, то эта разница равна 0).
# Классный руководитель решил сформировать бригады так, чтобы максимальное из чисел неудобства сформированных бригад было минимально. Помогите ему в этом!
# Рассмотрим следующий пример. Пусть в классе 8 человек, рост которых в сантиметрах равен 170, 205, 225, 190, 260, 130, 225, 160, и необходимо сформировать две бригады по три человека в каждой. Тогда одним из вариантов является такой:
# 1 бригада: люди с ростом 225, 205, 225
# 2 бригада: люди с ростом 160, 190, 170
# При этом число неудобства первой бригады будет равно 20, а число неудобства второй — 30. Максимальное из чисел неудобств будет 30, и это будет наилучший возможный результат.

# Формат ввода
# Сначала вводятся натуральные числа N, R и C — количество человек в классе, количество бригад и количество человек в каждой бригаде (1 ≤ R∙C ≤ N ≤ 100 000). Далее вводятся N целых чисел — рост каждого из N учеников. Рост ученика — натуральное число, не превышающее 1 000 000 000.

# Формат вывода
# Выведите одно число — наименьше возможное значение максимального числа неудобства сформированных бригад.

# Решение из разбора

# Можно ли собрать достаточное количество бригад при заданном числе неудобств
def f_check(value, params):
	r, c, students = params
	brigades = 0
	i = 0
	while i < len(students) - c + 1:
		if students[i + c - 1] - students[i] <= value:
			brigades += 1
			i += c
		else:
			i += 1
	return brigades >= r

def left_bin_search(left, right, f_check, params):
	while left < right:
		middle = (right + left) // 2
		if f_check(middle, params):
			right = middle
		else:
			left = middle + 1
	return left

n, r, c = map(int, input().split())
students = []
for _ in range(n):
	students.append(int(input()))
students.sort()
print(left_bin_search(0, students[-1] - students[0], f_check, (r, c, students)))
