# E. Чемпионат по метанию коровьих лепешек
# Ежегодный турнир «Веселый коровяк» — по метанию коровьих лепешек на дальность — прошел 8–9 июля в селе Крылово Осинского района Пермского края.
# Участники соревнований кидают «снаряд» — спрессованный навоз, выбирая его из заранее заготовленной кучи. Желающих поупражняться в силе броска традиционно очень много — как мужчин, так и женщин.
# Каждую лепешку, которую метнули участники «Веселого коровяка», внимательно осматривали женщины в костюмах коров и тщательно замеряли расстояние.
# Соревнования по метанию коровьих лепешек проводятся в Пермском крае с 2009 года.

# К сожалению, после чемпионата потерялись записи с фамилиями участников, остались только записи о длине броска в том порядке, в котором их совершали участники.
# Трактиорист Василий помнит три факта:
# 1) Число метров, на которое он метнул лепешку, оканчивалось на 5
# 2) Один из победителей чемпионата метал лепешку до Василия
# 3) Участник, метавший лепешку сразу после Василия, метнул ее на меньшее количество метров
# Будем считать, что участник соревнования занял k-е место, если ровно (k − 1) участников чемпионата метнули лепешку строго дальше, чем он.
# Какое максимально высокое место мог занять Василий?

# Формат ввода
# Первая строка входного файла содержит целое число n — количество участников чемпионата по метанию лепешек (3 ≤ n ≤ 105).
# Вторая строка входного файла содержит n положительных целых чисел, каждое из которых не превышает 1000, — дальность броска участников чемпионата, приведенные в том порядке, в котором происходило метание.

# Формат вывода
# Выведите самое высокое место, которое мог занять тракторист Василий. Если не существует ни одного участника чемпионата, который удовлетворяет, описанным выше условиям, выведите число 0.

def	find_place(throws, n):
	vasya_idx = -1
	# найдём индекс первого броска с максимальным результатом, будем искать бросок Василия после него
	winner_idx = throws.index(max(throws))
	for i in range(winner_idx + 1, n - 1):
		# ищем индекс лучшего броска Василия
		if throws[i] % 10 == 5 and throws[i] > throws[i + 1] and (vasya_idx == -1 or throws[i] > throws[vasya_idx]):
				vasya_idx = i
	
	if vasya_idx == -1:
		return 0
	else:
		place = 0
		for t in throws:
			if t > throws[vasya_idx]:
				place += 1
		return place + 1

n = int(input())
throws = list(map(int, input().split()))
print(find_place(throws, n))
