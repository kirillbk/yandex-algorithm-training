# E. Красота превыше всего
# В парке города Питсбурга есть чудесная аллея, состоящая из N посаженных в один ряд деревьев, каждое одного из K сортов.
# В связи с тем, что Питсбург принимает открытый чемпионат Байтландии по программированию, было решено построить огромную арену для проведения соревнований.
# Так, согласно этому плану вся аллея подлежала вырубке. Однако министерство деревьев и кустов воспротивилось этому решению, и потребовало оставить некоторые из деревьев в покое.
# Согласно новому плану строительства все деревья, которые не будут вырублены, должны образовывать один непрерывный отрезок, являющийся подотрезком исходного.
# Каждого из K видов деревьев требуется сохранить хотя бы по одному экземпляру. На вас возложена задача найти отрезок наименьшей длины, удовлетворяющий указанным ограничениям.

# Формат ввода
# В первой строке входного файла находятся два числа N и K (1 ≤ N, K ≤ 250000). Во второй строке входного файла следуют N чисел (разделенных пробелами), i-ое число второй строки задает цвет i-ого слева дерева в аллее. Гарантируется, что присутствует хотя бы одно дерево каждого цвета

# Формат вывода
# В выходной файл выведите два числа, координаты левого и правого концов отрезка минимальной длины, удовлетворяющего условию. Если оптимальных ответов несколько, выведите любой.

n, k = map(int, input().split())
trees = list(map(int, input().split()))

# на всём отрезке гарантированно есть все цвета
best_l, best_r = 0, n - 1
# список для хранения количества цветов деревьев на текущем отрезке (k + 1, чтобы не вычитать 1 из индекса)
colors = [0] * (k + 1)
left = right = 0
num_colors = 0
for right in range(n):
	# увеличить количество цветов на отрезке, если раньше не было такого цвета
	if not colors[trees[right]]:
		num_colors += 1
	colors[trees[right]] += 1
	if num_colors == k:
		# двигаем левую границу, пока на отрезке есть все цвета
		while colors[trees[left]] > 1:
			colors[trees[left]] -= 1
			left += 1
		if right - left < best_r - best_l:
			best_l, best_r = left, right

print(best_l + 1, best_r + 1)
