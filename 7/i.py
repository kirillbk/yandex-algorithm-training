# I. Автобусы
# Новый Президент Тридевятой республики начал свою деятельность с полной ревизии системы общественного транспорта страны. В результате на основе социологических опросов населения было составлено идеальное ежедневное расписание движения междугородних автобусов, утвержденное Парламентом республики.
# Более того, было решено заменить весь автобусный парк одинаковыми новыми, очень дорогими, но гораздо более надежными, красивыми и удобными машинами.
# Автобусная сеть страны охватывает N городов, занумерованных целыми числами от 1 до N.
# Идеальное расписание содержит M ежедневных рейсов, i-й рейс начинается в городе Fi в момент времени Xi и заканчивается в некотором другом городе Gi в момент времени Yi.
# Продолжительность каждого рейса ненулевая и строго меньше 24 часов. Рейс i выполняется одним из автобусов, находящихся в момент времени Xi в городе Fi.
# Новые автобусы не требуют ремонта и могут работать круглосуточно, поэтому автобус, прибывший в некоторый момент времени в некоторый город, всегда готов в тот же самый момент времени или позже отправиться в путь для обслуживания любого другого рейса из данного города. Автобус может выехать из города, только выполняя какой-либо рейс из расписания.
# Предполагается, что расписание будет действовать неограниченное время, поэтому может оказаться так, что его невозможно обслужить никаким конечным числом автобусов.
# Определите наименьшее количество новых автобусов, достаточное для обеспечения движения по расписанию в течение неограниченного периода времени.

# Формат ввода
# В первой строке задаются целые числа N и М (1 ≤ N, M ≤ 100 000) — количество городов и рейсов автобусов соответственно.
# В каждой из следующих M строк содержится описание рейса автобуса: номер города отправления Fi, время отправления Xi, номер города назначения Gi (Fi ≠ Gi), время прибытия Yi, отделенные друг от друга одним пробелом.
# Время прибытия и отправления задается в формате HH:MM, где HH — часы от 00 до 23, MM — минуты от 00 до 59.

# Формат вывода
# Выведите одно число — минимально необходимое количество автобусов. Если расписание невозможно обслуживать в течение неограниченного периода времени конечным числом автобусов, выведите число -1.

# Решение из разбора

DEPARTURE = 1
ARRIVAL = -1

def to_minutes(time):
	h, m = map(int, time.split(':'))
	return h * 60 + m

n, m = map(int, input().split())
bus_balance = [0] * (n + 1)
events = []
overmidnight = 0
for _ in range(m):
	c_dep, dep_time, c_arr, arr_time = input().split()
	c_dep = int(c_dep)
	c_arr = int(c_arr)
	dep_time = to_minutes(dep_time)
	arr_time = to_minutes(arr_time)
	# посчитаем сколько автобусов находится в пути в полночь
	if dep_time > arr_time:
		overmidnight += 1
	# для каждого города определим баланс автобусов
	bus_balance[c_dep] -= 1
	bus_balance[c_arr] += 1
	events.append((dep_time, DEPARTURE, c_dep))
	events.append((arr_time, ARRIVAL, c_arr))

disbalance = False
for i in range(1, n + 1):
	if bus_balance[i] != 0:
		disbalance = True
		break
# если расписание невозможно обслуживать
if disbalance:
	print(-1)
else:
	cnnt_buses = [0] * (n + 1)
	events.sort()
	for _, event, city in events:
		if event == ARRIVAL:
			cnnt_buses[city] += 1
		else:
			if cnnt_buses[city] > 0:
				cnnt_buses[city] -= 1
	ans = 0
	for i in range(1, n + 1):
		ans += cnnt_buses[i]
	# результат = количество автобусов в городах в полночь + количество автобусов в пути в полночь
	print(ans + overmidnight)
